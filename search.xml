<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>低配置电脑AI翻唱全教程</title>
      <link href="/2025/01/09/Ai%E7%BF%BB%E5%94%B1/"/>
      <url>/2025/01/09/Ai%E7%BF%BB%E5%94%B1/</url>
      
        <content type="html"><![CDATA[<p>小白教程  谨慎科学食用</p><blockquote><p>本文所使用的网站&amp;软件</p></blockquote><ul><li>音乐免费下载平台（MyFreeMP3）：<a href="https://www.myfreemp3.com.cn/">https://www.myfreemp3.com.cn/</a></li><li>Google的Colab实验平台：<a href="https://colab.research.google.com/">https://colab.research.google.com/</a></li><li>AutoDL算力平台：<a href="https://www.autodl.com/">https://www.autodl.com/</a></li><li>Adobe Audition 2025版</li></ul><h2 id="素材收集"><a href="#素材收集" class="headerlink" title="素材收集"></a>素材收集</h2><h3 id="被AI者的声音素材"><a href="#被AI者的声音素材" class="headerlink" title="被AI者的声音素材"></a>被AI者的声音素材</h3><ul><li>因为被AI者母语不是中文，但演绎歌曲为中文，所以准备了4个3-10分钟的音频，分别是1个采访音频、2个唱歌音频（最好是Live版）、1个被AI者中文音频</li></ul><h3 id="演绎歌曲"><a href="#演绎歌曲" class="headerlink" title="演绎歌曲"></a>演绎歌曲</h3><ul><li>《最后一页》【最好不要合唱歌曲】</li></ul><blockquote><p>TIPS：Youtube或B站的视频不支持页面直接下载，可借用下面两个网站下载。<br>Youtube视频下载网站：<a href="https://yt1ss.pro/zh-cn199/">https://yt1ss.pro/zh-cn199/</a><br>B站视频下载网站：<a href="https://snapany.com/zh/bilibili">https://snapany.com/zh/bilibili</a></p></blockquote><h2 id="音频分离"><a href="#音频分离" class="headerlink" title="音频分离"></a>音频分离</h2><p>本教程使用的音频分离模型MSST-WebUI，是B站开源UP主花儿不哭基于原UVR5的基础融合迭代更新，是目前最新最有用的音频分离模型。</p><ul><li>MSST-WebUI项目开源地址：<a href="https://github.com/SUC-DriverOld/MSST-WebUI">https://github.com/SUC-DriverOld/MSST-WebUI</a></li><li>开源UP主超详细零帧起手教程：<a href="https://r1kc63iz15l.feishu.cn/wiki/JSp3wk7zuinvIXkIqSUcCXY1nKc">https://r1kc63iz15l.feishu.cn/wiki/JSp3wk7zuinvIXkIqSUcCXY1nKc</a></li></ul><blockquote><p>云端训练：Colab需要挂梯子且每天只能白嫖2小时，AutoDL网站的4090主机每小时2块钱左右。</p></blockquote><h3 id="Colab云端音频分离教程"><a href="#Colab云端音频分离教程" class="headerlink" title="Colab云端音频分离教程"></a>Colab云端音频分离教程</h3><ul><li>MSST云端使用教程：<a href="https://r1kc63iz15l.feishu.cn/wiki/IupAwjospiOQVLkQOsRcpGVznAg">https://r1kc63iz15l.feishu.cn/wiki/IupAwjospiOQVLkQOsRcpGVznAg</a></li><li>Colab项目地址：<a href="https://colab.research.google.com/github/SUC-DriverOld/MSST-WebUI/blob/main/webUI_for_colab.ipynb">https://colab.research.google.com/github/SUC-DriverOld/MSST-WebUI/blob/main/webUI_for_colab.ipynb</a></li></ul><h4 id="第一步：打开WebUI界面。"><a href="#第一步：打开WebUI界面。" class="headerlink" title="第一步：打开WebUI界面。"></a>第一步：打开WebUI界面。</h4><ul><li>直接打开项目地址即可进入项目，登入Gmail邮箱帐号，其余内容参考MSST云端使用教程，逐一运行所有代码，点击出现的WebUI链接即可进入操作界面。<blockquote><p>PS：如果运行一次后WebUI界面不出现，重新再运行一次即可。两个压缩包input.zip和Outputs.zip需要上传在MyDrive下面（好像也可以不上传，反正我传了）</p></blockquote><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%871.png" class=""></li></ul><h4 id="第二步：上传文件进行音频分离"><a href="#第二步：上传文件进行音频分离" class="headerlink" title="第二步：上传文件进行音频分离"></a>第二步：上传文件进行音频分离</h4><blockquote><p>MSST模型</p><ul><li>普通去除：Kim_MelBandRoformer + deverb_bs_roformer_8_256dim_8depth</li><li>中间加入去和声模型使用模型(觉得普通去除不够好)：Kim_MelBandRoformer + mel_band_roformer_karaoke_aufr33_viperx_sdr_10.1956 + deverb_bs_roformer_8_256dim_8depth</li></ul></blockquote><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%872.png" class=""><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%873.png" class=""><ul><li>Select model category处选择对应的模型项目，Select Model处选择对应的模型。</li><li>Output format处可选择三种类型【wav高质但内存大(4分钟的歌曲70M左右)，下载分离文件时会比较慢；mp3一般但内存小（4分钟的歌曲8M左右），flac暂时没试，建议选wav】</li><li>点击Input audio将文件拖拽上传，点击音频分离。</li></ul><h4 id="第三步：下载分离好的音频"><a href="#第三步：下载分离好的音频" class="headerlink" title="第三步：下载分离好的音频"></a>第三步：下载分离好的音频</h4><ul><li>完成后分离的音频会被放在WebUI的results下面，点击下载即可。<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%874.png" class=""></li></ul><h4 id="第四步：重复第二步第三步的步骤"><a href="#第四步：重复第二步第三步的步骤" class="headerlink" title="第四步：重复第二步第三步的步骤"></a>第四步：重复第二步第三步的步骤</h4><ul><li>将上述第三步得到的人声音频重复第二步去和音去混响。若试听分离音频已经没有和音混音，则不需要进行分离，一般进行三次分离后就可以得到很干净的干声音频。</li></ul><h3 id="AutoDL云端音频分离教程"><a href="#AutoDL云端音频分离教程" class="headerlink" title="AutoDL云端音频分离教程"></a>AutoDL云端音频分离教程</h3><h4 id="第一步：创建训练主机"><a href="#第一步：创建训练主机" class="headerlink" title="第一步：创建训练主机"></a>第一步：创建训练主机</h4><ul><li>打开网站地址，选择一台空闲的主机，点击社区镜像，搜索框输入MSST后，选择其中一个【开源UP说哪个都可以，所以选了个最新的】，点击立即创建。<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%875.png" class=""><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%876.png" class=""></li></ul><h4 id="第二步：音频分离"><a href="#第二步：音频分离" class="headerlink" title="第二步：音频分离"></a>第二步：音频分离</h4><ul><li>点击JupyterLab进入操作台，运行前面2段代码代开WebUI界面，后续操作与上述Colab一致，不再阐述。</li><li>分离音频被放在autodl-tmp&#x2F;MSST&#x2F;results文件夹下。<blockquote><p>与Colab不同，分离音频无需重新下载上传步骤，后续音频清洗可直接将音频从results处粘到input处进行批量清洗。</p></blockquote><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%877.png" class=""><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%878.png" class=""><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%879.png" class=""></li></ul><p>花儿不哭说Colab平台上的代码是他自己维护的，但AutoDL平台社区镜像的代码不是他维护的，两边我都尝试了，目前都可以使用。</p><h3 id="音频分离网站"><a href="#音频分离网站" class="headerlink" title="音频分离网站"></a>音频分离网站</h3><h4 id="MVSEP网"><a href="#MVSEP网" class="headerlink" title="MVSEP网"></a>MVSEP网</h4><ul><li>MVSEP网址：<a href="https://mvsep.com/zh/home">https://mvsep.com/zh/home</a></li><li>该网址模型也很多，但是免费模型分离出来的音频杂音比较多，不够纯净。</li></ul><h4 id="Vocalremover网"><a href="#Vocalremover网" class="headerlink" title="Vocalremover网"></a>Vocalremover网</h4><ul><li>音频分离网站：<a href="https://vocalremover.org/zh/">https://vocalremover.org/zh/</a></li></ul><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><blockquote><p>因目前收集的Colab平台模型代码bug比较多，模型训练及推理只在AutoDL平台进行。</p></blockquote><h3 id="AutoDL教程"><a href="#AutoDL教程" class="headerlink" title="AutoDL教程"></a>AutoDL教程</h3><h4 id="第一步：创建主机"><a href="#第一步：创建主机" class="headerlink" title="第一步：创建主机"></a>第一步：创建主机</h4><ul><li>选择一台空闲的主机，点击社区镜像，搜索框输入RVC后，选择RVC-Project的V4版本，点击立即创建。【V3和V4版本需要适配4090主机】<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8710.png" class=""></li></ul><h4 id="第二步：打开模型训练界面"><a href="#第二步：打开模型训练界面" class="headerlink" title="第二步：打开模型训练界面"></a>第二步：打开模型训练界面</h4><ul><li>在终端输入命令打开训练界面：cd &#x2F;root&#x2F;Retrieval-based-Voice-Conversion-WebUI &amp;&amp; python infer-web.py –port 6006<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8711.png" class=""></li></ul><h4 id="第三步：上传训练素材"><a href="#第三步：上传训练素材" class="headerlink" title="第三步：上传训练素材"></a>第三步：上传训练素材</h4><ul><li>在界面创建一个名为train的文件夹，上传干声模型训练素材。</li></ul><h4 id="第四步：定义训练参数"><a href="#第四步：定义训练参数" class="headerlink" title="第四步：定义训练参数"></a>第四步：定义训练参数</h4><ul><li>实验名可以自定义，输入训练文件路径&#x2F;root&#x2F;train</li><li>修改总训练轮数&amp;保存频率【此处将训练轮数定为200，保存频率为20，因为轮数比较少的时候模型还是会带点口音，开源UP主说十几分钟的素材200-300轮即可】</li><li>最后点击一键训练，出现成功提示即可。<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8712.png" class=""><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8713.png" class=""></li></ul><h2 id="模型推理"><a href="#模型推理" class="headerlink" title="模型推理"></a>模型推理</h2><ul><li>创建test文件夹，上传需要翻唱的歌曲干声素材</li><li>推理页面输入干声文件路径，选择rmvpe格式，点击转换</li><li>试听并点击下载推理结果<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8714.png" class=""></li></ul><h2 id="音频合成"><a href="#音频合成" class="headerlink" title="音频合成"></a>音频合成</h2><h4 id="安装破解版Au2025"><a href="#安装破解版Au2025" class="headerlink" title="安装破解版Au2025"></a>安装破解版Au2025</h4><ul><li>详细安装教程：<a href="https://mp.weixin.qq.com/s/ab8utKqmKHI6iQnKlZ276Q">https://mp.weixin.qq.com/s/ab8utKqmKHI6iQnKlZ276Q</a><blockquote><p>因为安装包中有破解补丁，所以安装前最好断网。其次，解压缩安装包后可能找不到破解补丁，应该是已经被系统的安全管家拦截，所以需要在 Windows安全中心-病毒和威胁防护-保护历史记录 中 查看以保护的威胁，将其进行还原。</p></blockquote><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8715.png" class=""><img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8716.png" class=""></li></ul><h4 id="合成音频"><a href="#合成音频" class="headerlink" title="合成音频"></a>合成音频</h4><ul><li>将演绎的音频伴奏，AI推理结果拖入Au</li><li>增加音频效果：效果-混响-室内混响；效果-滤波与均衡-参数均衡器-人声增强<img src="/img/AI%E7%BF%BB%E5%94%B1/%E5%9B%BE%E7%89%8717.png" class=""></li></ul><h2 id="AI翻唱效果"><a href="#AI翻唱效果" class="headerlink" title="AI翻唱效果"></a>AI翻唱效果</h2><blockquote><p>Taeyeon中文原声</p></blockquote><blockquote><p>训练了100步的模型推理音频</p></blockquote><blockquote><p>训练了200步的模型推理音频</p></blockquote><blockquote><p>Huggingface上别人训练的模型推理音频</p></blockquote><p>整体音色上是有点像的，我自己训练的模型和Huggingface模型推理音频相比，我自己训练的模型好像音调要更尖一点，主要是训练素材不同，感觉是我的训练素材里面有首比较高音的歌。最后整体效果AI翻唱的声音感觉还是有点生硬，一方面是模型训练问题，也可能是最后合成音频的时候技术加工不够。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件研究法的Python实现</title>
      <link href="/2024/12/11/%E5%B8%82%E5%9C%BA%E7%A0%94%E7%A9%B6%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2024/12/11/%E5%B8%82%E5%9C%BA%E7%A0%94%E7%A9%B6%E6%B3%95%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>小白笔记,谨慎食用</p></blockquote><h2 id="什么是时间研究法？"><a href="#什么是时间研究法？" class="headerlink" title="什么是时间研究法？"></a>什么是时间研究法？</h2><ul><li>事件研究法 (Event Study Methodology，ESM)是一种用于分析重大事件对公司层面变量短期影响的计量方法。</li><li>事件研究法的基本思想是，在一个指定的时间范围内，计算该期间的日异常收益率（实际收益率与预期收益率之差）及其累计值。</li><li>历史上，该方法主要应用于金融领域，尤其是用于评估特定事件对企业股票价格的影响。</li><li>事件研究法通常用于验证证券市场是否为半强式有效，即检查市场在新信息（如公告、政策变动等）发布后是否迅速且准确地调整价格。<ul><li>1.若累积异常收益率在事件窗口内显著为零，说明市场迅速反映信息，支持半强式有效性。</li><li>2.若在事件发生前出现异常收益，则可能存在信息泄露。</li><li>3.若在事件发生后价格反应缓慢，说明市场存在非有效性。</li></ul></li></ul><h2 id="事件研究法的步骤"><a href="#事件研究法的步骤" class="headerlink" title="事件研究法的步骤"></a>事件研究法的步骤</h2><h3 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h3><ul><li>事件是指可能对感兴趣的因变量（Y）产生影响的相关政策或措施。例如，公司发布的重要公告，并购重组或行业突发情况等。</li></ul><h3 id="选定事件研究日"><a href="#选定事件研究日" class="headerlink" title="选定事件研究日"></a>选定事件研究日</h3><ul><li>常见的问题是一个事件发生会有多个日期，根据实际科学且合理地选择多个日期中信息含量最大的日期作为事件发生日期，即Day0。</li></ul><h3 id="确定窗口期及估计期"><a href="#确定窗口期及估计期" class="headerlink" title="确定窗口期及估计期"></a>确定窗口期及估计期</h3><ul><li>窗口期：事件窗口的时间范围，包括事件发生前后的若干天。如，[-10, +10]表示事件发生前10天到事件后10天的窗口。如果事件日为交易日,则窗口期是21天，反之，是20天。</li><li>估计期：用于估算正常市场反应的时间段。</li></ul><h3 id="计算异常收益及累积异常收益"><a href="#计算异常收益及累积异常收益" class="headerlink" title="计算异常收益及累积异常收益"></a>计算异常收益及累积异常收益</h3><ul><li>正常收益：正常收益是模型基于历史数据预测正常状态下的表现，因此，要选定正常收益预测模型。</li><li>异常收益：事件窗口期内的实际收益与正常收益的差值。</li><li>累积异常收益：事件窗口内的异常收益求和，以评估事件的总影响。</li></ul><h3 id="显著性及稳健性检验"><a href="#显著性及稳健性检验" class="headerlink" title="显著性及稳健性检验"></a>显著性及稳健性检验</h3><ul><li>单样本T检验：异常收益或累积异常收益是否显著为0。</li></ul><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><blockquote><p>京沪高铁股利政策效应分析，即京沪高铁股利政策实施对股价的影响。</p></blockquote><h3 id="事件研究日"><a href="#事件研究日" class="headerlink" title="事件研究日"></a>事件研究日</h3><ul><li><p>本案例以京沪高铁2021-2023年的股利分配事件为样本，且以股利分配公告日为事件研究日。</p><table><thead><tr><th>年份</th><th>2021</th><th>2022</th><th>2023</th></tr></thead><tbody><tr><td>事件研究日</td><td>2022-07-23</td><td>2023-07-22</td><td>2024-06-24</td></tr></table></li><li><p>样本数据整理，市场收益率：上证指数；数据范围：20210101-20240930。</p><blockquote><p>数据获取：qstock包</p></blockquote></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas as pd</span><br><span class="line"><span class="keyword">import</span> qstock as qs</span><br><span class="line"><span class="keyword">import</span> statsmodels.api as sm</span><br><span class="line">from scipy.stats <span class="keyword">import</span> ttest_1samp</span><br><span class="line"></span><br><span class="line"># 利用qstock包获取数据下载到excel</span><br><span class="line">data <span class="operator">=</span> qs.get_data([&#x27;京沪高铁&#x27;,&#x27;上证指数&#x27;], start<span class="operator">=</span>&#x27;<span class="number">20190101</span>&#x27;, end<span class="operator">=</span>&#x27;<span class="number">20240930</span>&#x27;, freq<span class="operator">=</span>&#x27;d&#x27;, fqt<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">data <span class="operator">=</span> data.reset_index()</span><br><span class="line"></span><br><span class="line"># <span class="number">1</span>. 下载并整理数据：计算每日收益率</span><br><span class="line">data[&#x27;daily_return&#x27;] <span class="operator">=</span> data[&#x27;close&#x27;].pct_change()   # 计算每日收益率</span><br><span class="line">stock_data <span class="operator">=</span> data[data[&#x27;name&#x27;] <span class="operator">==</span> &#x27;京沪高铁&#x27;][[&#x27;date&#x27;, &#x27;daily_return&#x27;]].rename(columns<span class="operator">=</span>&#123;&#x27;daily_return&#x27;: &#x27;stock_return&#x27;&#125;)</span><br><span class="line">index_data <span class="operator">=</span> data[data[&#x27;name&#x27;] <span class="operator">==</span> &#x27;上证指数&#x27;][[&#x27;date&#x27;, &#x27;daily_return&#x27;]].rename(columns<span class="operator">=</span>&#123;&#x27;daily_return&#x27;: &#x27;index_return&#x27;&#125;)</span><br><span class="line"></span><br><span class="line"># 合并数据并清理空值</span><br><span class="line">merged_data <span class="operator">=</span> pd.merge(stock_data, index_data, on<span class="operator">=</span>&#x27;date&#x27;).dropna()</span><br><span class="line"></span><br><span class="line">merged_data</span><br></pre></td></tr></table></figure><h3 id="窗口期及估计期"><a href="#窗口期及估计期" class="headerlink" title="窗口期及估计期"></a>窗口期及估计期</h3><ul><li>窗口期：短期事件冲击窗口期一般为3天，5天或10天，本案例将事件日前后5个交易日数据作为事件窗口期，即【-5，5】</li><li>估计期：短期事件冲击窗口期一般为90天，120天或180天，本案例将窗口期前120个交易日数据作为估计期，即【-125，-6】</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">2</span>. 提取建模数据和事件窗口数据</span><br><span class="line">def extract_event_data(event_date, data_frame, estimation_window<span class="operator">=</span><span class="number">120</span>,event_window<span class="operator">=</span><span class="number">5</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        event_date <span class="operator">=</span> pd.to_datetime(event_date)</span><br><span class="line">        data_frame <span class="operator">=</span> data_frame.reset_index(drop<span class="operator">=</span><span class="type">True</span>)</span><br><span class="line">        </span><br><span class="line">        # 筛选出早于公告日的数据,找到最接近公告日的日期或公告日（包括当天）</span><br><span class="line">        filtered_data <span class="operator">=</span> data_frame[data_frame[&#x27;date&#x27;] <span class="operator">&lt;=</span> event_date]</span><br><span class="line">        event_idx <span class="operator">=</span> (filtered_data[&#x27;date&#x27;] <span class="operator">-</span>  event_date).abs().idxmin()</span><br><span class="line">        </span><br><span class="line">        # 检查公告日是否是交易日，是的话为<span class="number">0</span>，不是的话为<span class="number">1</span><span class="operator">【</span>特殊处理边界<span class="operator">】</span></span><br><span class="line">        is_current_day <span class="operator">=</span> event_date not <span class="keyword">in</span> filtered_data[&#x27;date&#x27;].values</span><br><span class="line">            </span><br><span class="line">        # 计算估计期和事件窗口范围</span><br><span class="line">        start_idx <span class="operator">=</span> <span class="built_in">max</span>(<span class="number">0</span>, event_idx <span class="operator">-</span> estimation_window <span class="operator">-</span> event_window <span class="operator">+</span> int(is_current_day))</span><br><span class="line">        estimation_end_idx <span class="operator">=</span> event_idx <span class="operator">-</span> event_window <span class="operator">+</span> int(is_current_day)</span><br><span class="line"></span><br><span class="line">        # 估计期数据</span><br><span class="line">        estimation_data <span class="operator">=</span> data_frame.iloc[start_idx:estimation_end_idx]</span><br><span class="line">        </span><br><span class="line">        # 事件窗口数据<span class="operator">【</span>考虑事件日不是交易日<span class="operator">】</span></span><br><span class="line">        event_window_data <span class="operator">=</span> data_frame.iloc[event_idx <span class="operator">-</span> event_window <span class="operator">+</span> int(is_current_day) : event_idx <span class="operator">+</span> event_window <span class="operator">+</span> <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> estimation_data, event_window_data</span><br><span class="line">    </span><br><span class="line">    except <span class="type">IndexError</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;警告：事件日期 &#123;event_date&#125; 超出数据范围或数据不足。&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">None</span>, <span class="type">None</span></span><br></pre></td></tr></table></figure><h3 id="正常收益率"><a href="#正常收益率" class="headerlink" title="正常收益率"></a>正常收益率</h3><ul><li>正常收益率模型：使用估计期数据进行参数估计,拟合得到线性回归模型。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">3</span>. 构建<span class="type">OLS回归模型，计算回归参数</span></span><br><span class="line">def calculate_regression_coefficients(estimation_data):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用估计期数据进行OLS回归，计算回归参数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="type">X</span> <span class="operator">=</span> sm.add_constant(estimation_data[&#x27;index_return&#x27;])  # 添加常数项</span><br><span class="line">    y <span class="operator">=</span> estimation_data[&#x27;stock_return&#x27;]</span><br><span class="line">    model <span class="operator">=</span> sm.<span class="type">OLS</span>(y, <span class="type">X</span>).fit()</span><br><span class="line">    <span class="built_in">print</span>(model.summary())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model.params[&#x27;const&#x27;], model.params[&#x27;index_return&#x27;]</span><br></pre></td></tr></table></figure></li></ul><h3 id="异常收益率-累积异常收益率"><a href="#异常收益率-累积异常收益率" class="headerlink" title="异常收益率&amp;累积异常收益率"></a>异常收益率&amp;累积异常收益率</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">4</span>. 计算累积异常收益率（<span class="type">CAR）</span></span><br><span class="line">def calculate_CAR(event_data, alpha, beta, event_date):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用事件窗口数据和回归参数计算累积异常收益率（CAR）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    event_data <span class="operator">=</span> event_data.copy()  # 避免修改原始数据</span><br><span class="line">    event_data[&#x27;predicted_return&#x27;] <span class="operator">=</span> event_data[&#x27;index_return&#x27;] <span class="operator">*</span> beta <span class="operator">+</span> alpha  # 预测收益率</span><br><span class="line">    event_data[&#x27;abnormal_return&#x27;] <span class="operator">=</span> event_data[&#x27;stock_return&#x27;] <span class="operator">-</span> event_data[&#x27;predicted_return&#x27;]  # 异常收益率</span><br><span class="line">    event_data[&#x27;cumulative_abnormal_return&#x27;] <span class="operator">=</span> event_data[&#x27;abnormal_return&#x27;].cumsum()  # 累积异常收益率</span><br><span class="line">    event_data[&#x27;event_date&#x27;] <span class="operator">=</span> event_date</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> event_data</span><br></pre></td></tr></table></figure><blockquote><p>整合版Python代码</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas as pd</span><br><span class="line"><span class="keyword">import</span> qstock as qs</span><br><span class="line"><span class="keyword">import</span> statsmodels.api as sm</span><br><span class="line">from scipy.stats <span class="keyword">import</span> ttest_1samp</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    </span><br><span class="line">    # 获取并整理数据</span><br><span class="line">    stock <span class="operator">=</span> [&#x27;京沪高铁&#x27;,&#x27;上证指数&#x27;]</span><br><span class="line">    merged_data <span class="operator">=</span> get_Data(stock)</span><br><span class="line">    <span class="built_in">print</span>(merged_data)</span><br><span class="line">    </span><br><span class="line">    all_results <span class="operator">=</span> pd.<span class="type">DataFrame</span>()</span><br><span class="line">    t_test_res <span class="operator">=</span> pd.<span class="type">DataFrame</span>()</span><br><span class="line">    </span><br><span class="line">    event_dates <span class="operator">=</span> [&#x27;<span class="number">2022</span><span class="operator">-</span><span class="number">07</span><span class="operator">-</span><span class="number">23</span>&#x27;, &#x27;<span class="number">2023</span><span class="operator">-</span><span class="number">07</span><span class="operator">-</span><span class="number">22</span>&#x27;, &#x27;<span class="number">2024</span><span class="operator">-</span><span class="number">06</span><span class="operator">-</span><span class="number">24</span>&#x27;]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> event_date <span class="keyword">in</span> event_dates:</span><br><span class="line">        </span><br><span class="line">        # 获取估计期及窗口期数据</span><br><span class="line">        estimation_data, event_data <span class="operator">=</span> extract_event_data(event_date, merged_data)</span><br><span class="line">        </span><br><span class="line">        # 正常收益模型</span><br><span class="line">        alpha, beta <span class="operator">=</span> calculate_regression_coefficients(estimation_data)</span><br><span class="line">        </span><br><span class="line">        # 异常收益率及累积异常收益率</span><br><span class="line">        car_result <span class="operator">=</span> calculate_CAR(event_data, alpha, beta, event_date)</span><br><span class="line">        all_results <span class="operator">=</span> pd.concat([all_results,car_result],ignore_index<span class="operator">=</span><span class="type">True</span>)</span><br><span class="line">        </span><br><span class="line">        # 显著性检验</span><br><span class="line">        t_test <span class="operator">=</span> single_sample_test(car_result, event_date)</span><br><span class="line">        t_test_res <span class="operator">=</span> pd.concat([t_test_res,t_test],ignore_index<span class="operator">=</span><span class="type">True</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        # 将结果写入excel</span><br><span class="line">        all_results.to_excel(&#x27;异常收益率<span class="operator">&amp;</span>累积异常收益率.xlsx&#x27;,index<span class="operator">=</span><span class="type">False</span>)</span><br><span class="line">        t_test_res.to_excel(&#x27;显著性检验.xlsx&#x27;,index<span class="operator">=</span><span class="type">False</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"># <span class="number">1</span>.利用qstock包获取数据下载到excel</span><br><span class="line"></span><br><span class="line">def get_Data(stock):</span><br><span class="line">    </span><br><span class="line">    data <span class="operator">=</span> qs.get_data(stock, start<span class="operator">=</span>&#x27;<span class="number">20210101</span>&#x27;, end<span class="operator">=</span>&#x27;<span class="number">20240930</span>&#x27;, freq<span class="operator">=</span>&#x27;d&#x27;, fqt<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">    data <span class="operator">=</span> data.reset_index()</span><br><span class="line"></span><br><span class="line">    # <span class="number">1</span>. 下载并整理数据：计算每日收益率</span><br><span class="line">    data[&#x27;daily_return&#x27;] <span class="operator">=</span> data[&#x27;close&#x27;].pct_change()   # 计算每日收益率</span><br><span class="line">    stock_data <span class="operator">=</span> data[data[&#x27;name&#x27;] <span class="operator">==</span> stock[<span class="number">0</span>]][[&#x27;date&#x27;, &#x27;daily_return&#x27;]].rename(columns<span class="operator">=</span>&#123;&#x27;daily_return&#x27;: &#x27;stock_return&#x27;&#125;)</span><br><span class="line">    index_data <span class="operator">=</span> data[data[&#x27;name&#x27;] <span class="operator">==</span> stock[<span class="number">1</span>]][[&#x27;date&#x27;, &#x27;daily_return&#x27;]].rename(columns<span class="operator">=</span>&#123;&#x27;daily_return&#x27;: &#x27;index_return&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    # 合并数据并清理空值</span><br><span class="line">    merged_data <span class="operator">=</span> pd.merge(stock_data, index_data, on<span class="operator">=</span>&#x27;date&#x27;).dropna()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merged_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>. 提取建模数据和事件窗口数据</span><br><span class="line">def extract_event_data(event_date, data_frame, estimation_window<span class="operator">=</span><span class="number">120</span>,event_window<span class="operator">=</span><span class="number">5</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        event_date <span class="operator">=</span> pd.to_datetime(event_date)</span><br><span class="line">        data_frame <span class="operator">=</span> data_frame.reset_index(drop<span class="operator">=</span><span class="type">True</span>)</span><br><span class="line">        </span><br><span class="line">        # 筛选出早于公告日的数据,找到最接近公告日的日期或公告日（包括当天）</span><br><span class="line">        filtered_data <span class="operator">=</span> data_frame[data_frame[&#x27;date&#x27;] <span class="operator">&lt;=</span> event_date]</span><br><span class="line">        event_idx <span class="operator">=</span> (filtered_data[&#x27;date&#x27;] <span class="operator">-</span>  event_date).abs().idxmin()</span><br><span class="line">        </span><br><span class="line">        # 如果目标日期是交易日,即目标日期在日期中</span><br><span class="line">        # 检查公告日是不是交易日，是的话为<span class="literal">true</span>，即数字<span class="number">1</span>，不是的话为<span class="number">0</span></span><br><span class="line">        is_current_day <span class="operator">=</span> event_date not <span class="keyword">in</span> filtered_data[&#x27;date&#x27;].values</span><br><span class="line">            </span><br><span class="line">        # 计算估计期和事件窗口范围</span><br><span class="line">        start_idx <span class="operator">=</span> <span class="built_in">max</span>(<span class="number">0</span>, event_idx <span class="operator">-</span> estimation_window <span class="operator">-</span> event_window <span class="operator">+</span> int(is_current_day))</span><br><span class="line">        estimation_end_idx <span class="operator">=</span> event_idx <span class="operator">-</span> event_window <span class="operator">+</span> int(is_current_day)</span><br><span class="line"></span><br><span class="line">        # 估计期数据</span><br><span class="line">        estimation_data <span class="operator">=</span> data_frame.iloc[start_idx:estimation_end_idx]</span><br><span class="line">        </span><br><span class="line">        # 事件窗口数据<span class="operator">【</span>考虑事件日不是交易日<span class="operator">】</span></span><br><span class="line">        event_window_data <span class="operator">=</span> data_frame.iloc[event_idx <span class="operator">-</span> event_window <span class="operator">+</span> int(is_current_day) : event_idx <span class="operator">+</span> event_window <span class="operator">+</span> <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> estimation_data, event_window_data</span><br><span class="line">    </span><br><span class="line">    except <span class="type">IndexError</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;警告：事件日期 &#123;event_date&#125; 超出数据范围或数据不足。&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">None</span>, <span class="type">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>. 构建<span class="type">OLS回归模型，计算回归参数</span></span><br><span class="line">def calculate_regression_coefficients(estimation_data):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用估计期数据进行OLS回归，计算回归参数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="type">X</span> <span class="operator">=</span> sm.add_constant(estimation_data[&#x27;index_return&#x27;])  # 添加常数项</span><br><span class="line">    y <span class="operator">=</span> estimation_data[&#x27;stock_return&#x27;]</span><br><span class="line">    model <span class="operator">=</span> sm.<span class="type">OLS</span>(y, <span class="type">X</span>).fit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model.params[&#x27;const&#x27;], model.params[&#x27;index_return&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>. 计算累积异常收益率（<span class="type">CAR）</span></span><br><span class="line">def calculate_CAR(event_data, alpha, beta, event_date):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用事件窗口数据和回归参数计算累积异常收益率（CAR）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    event_data <span class="operator">=</span> event_data.copy()  # 避免修改原始数据</span><br><span class="line">    event_data[&#x27;predicted_return&#x27;] <span class="operator">=</span> event_data[&#x27;index_return&#x27;] <span class="operator">*</span> beta <span class="operator">+</span> alpha  # 预测收益率</span><br><span class="line">    event_data[&#x27;abnormal_return&#x27;] <span class="operator">=</span> event_data[&#x27;stock_return&#x27;] <span class="operator">-</span> event_data[&#x27;predicted_return&#x27;]  # 异常收益率</span><br><span class="line">    event_data[&#x27;cumulative_abnormal_return&#x27;] <span class="operator">=</span> event_data[&#x27;abnormal_return&#x27;].cumsum()  # 累积异常收益率</span><br><span class="line">    event_data[&#x27;event_date&#x27;] <span class="operator">=</span> event_date</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> event_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">5</span>.累积超额收益率的单样本检验,检验其显著性是否为<span class="number">0</span></span><br><span class="line">def single_sample_test(car_data, event_date):</span><br><span class="line">    </span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对每个事件窗口的累积异常收益率（CAR）进行单样本 t 检验。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    event_car <span class="operator">=</span> car_data[car_data[&#x27;event_date&#x27;] <span class="operator">==</span> event_date][&#x27;cumulative_abnormal_return&#x27;]</span><br><span class="line"></span><br><span class="line">    # 单样本 t 检验，假设均值为 <span class="number">0</span></span><br><span class="line">    t_stat, p_value <span class="operator">=</span> ttest_1samp(event_car, popmean<span class="operator">=</span><span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">        # 保存结果</span><br><span class="line">    res <span class="operator">=</span> &#123;</span><br><span class="line">        &#x27;event_date&#x27;: event_date,</span><br><span class="line">        &#x27;mean_CAR&#x27;: event_car.mean(),</span><br><span class="line">        &#x27;t_stat&#x27;: t_stat,</span><br><span class="line">        &#x27;p_value&#x27;: p_value,</span><br><span class="line">        &#x27;significant&#x27;: p_value <span class="operator">&lt;</span> <span class="number">0.05</span>  # 是否显著</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pd.<span class="type">DataFrame</span>([res]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ <span class="operator">==</span> &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><ul><li>OLS模型的R方为0.3左右,模型解释度偏低。【可考虑正常收益的预测用精确率更高的模型替换】</li><li>显著性检验结果解读<ul><li>3次事件中，2022年的股利分配事件5%水平不显著，其余两次均在5%水平显著。</li><li>2023年的mean_CAR为3.16%，说明股利政策公布对京沪高铁股票价格产生正向影响。这点是比较符合实际的，因为2023年京沪高铁分红10股派1.116元，分红较前几年有质的提升，以及前几年因为疫情，股价比较低迷，公告之后存在正向的累积超额收益率感觉正常。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Nodejs+GitHub创建个人博客</title>
      <link href="/2024/11/19/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2024/11/19/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>小白科学食用指南</p><h2 id="Nodejs安装教程"><a href="#Nodejs安装教程" class="headerlink" title="Nodejs安装教程"></a>Nodejs安装教程</h2><h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><ul><li>在<a href="https://nodejs.cn/download/">Nodejs官方网址</a>下载安装包,选择Windows64位版本。<img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%98%E7%BD%91.png" class=""></li></ul><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><ul><li><p>D盘创建名为nodejs的空文件夹（用于存放nodejs安装文件）</p></li><li><p>双击msi安装包,点击Next开始安装;自定义修改nodejs的安装路径,将其放在刚刚创建的nodejs空文件夹;然后一路Next,最后Finish。<br><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%89%E8%A3%851.png"><br><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%89%E8%A3%852.png"><br><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%89%E8%A3%853.png"><br><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%89%E8%A3%854.png"><br><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%89%E8%A3%855.png"></p></li><li><p>验证nodejs是否安装成功,若出现下图结果,即为安装成功。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node <span class="operator">-</span>v  <span class="comment">// 显示nodejs安装版本</span></span><br><span class="line">npm <span class="operator">-</span>v  <span class="comment">// 显示npm版本</span></span><br></pre></td></tr></table></figure><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E5%AE%89%E8%A3%85%E6%98%BE%E7%A4%BA.png" class=""></li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li>若没有配置环境,后续可能会运行报错,所以要配置环境变量。</li><li>点击电脑设置-系统-系统信息-高级系统设置-环境变量-系统变量-Path-编辑-新建【增添以下四条环境变量信息】-最后确定,即可完成nodejs的配置。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">D</span>:\nodejs\node_cache</span><br><span class="line"><span class="type">D</span>:\nodejs\node_cache\node_modules</span><br><span class="line"><span class="type">D</span>:\nodejs\node_modules\npm</span><br><span class="line"><span class="type">D</span>:\nodejs\node_modules\npm\bin</span><br></pre></td></tr></table></figure><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE1.jpg" class=""><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/nodejs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE2.png" class=""></li></ul><h2 id="搭建Hexo主题"><a href="#搭建Hexo主题" class="headerlink" title="搭建Hexo主题"></a>搭建Hexo主题</h2><h3 id="创建并初始化主题文件夹"><a href="#创建并初始化主题文件夹" class="headerlink" title="创建并初始化主题文件夹"></a>创建并初始化主题文件夹</h3><ul><li>以管理员身份打开cmd,转入D盘,在D盘初始化名为blog的文件夹(名字可随意,但是一定要转入D盘,要不然东西都会装在C盘)<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">hexo <span class="keyword">init</span> blog</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><ul><li>继续cd命令进入blog文件夹,安装npm<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ul><h3 id="生成hexo文件"><a href="#生成hexo文件" class="headerlink" title="生成hexo文件"></a>生成hexo文件</h3><ul><li>初始化hexo主题,最后复制cmd窗口出现的<a href="http://localhost:4000/">网址url</a>到浏览器打开即可。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c <span class="comment">// 清楚缓存</span></span><br><span class="line">hexo g <span class="comment">// 生成文件</span></span><br><span class="line">hexo s <span class="comment">//启动服务</span></span><br></pre></td></tr></table></figure></li><li>PS:后续所有插件的安装都要以管理员的身份运行cmd,不然会报错;或者修改blog文件夹的读写权限。<img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E5%88%9D%E5%A7%8B%E5%8C%96blog1.png" class=""><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E5%88%9D%E5%A7%8B%E5%8C%96blog2.png" class=""><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E5%88%9D%E5%A7%8B%E5%8C%96blog3.png" class=""></li></ul><h2 id="将原始hexo主题替换stellar主题"><a href="#将原始hexo主题替换stellar主题" class="headerlink" title="将原始hexo主题替换stellar主题"></a>将原始hexo主题替换stellar主题</h2><h3 id="下载stellar主题"><a href="#下载stellar主题" class="headerlink" title="下载stellar主题"></a>下载stellar主题</h3><ul><li>以管理员身份打开cmd,进入到blog文件夹,输入以下命令下载stellar主题,下载好的主题文件会被放在文件夹node_modules<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo<span class="operator">-</span>theme<span class="operator">-</span>stellar</span><br></pre></td></tr></table></figure><img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E6%9B%BF%E6%8D%A2%E4%B8%BB%E9%A2%981.png" class=""></li></ul><h3 id="修改-config-yml文件替换主题"><a href="#修改-config-yml文件替换主题" class="headerlink" title="修改_config.yml文件替换主题"></a>修改_config.yml文件替换主题</h3><ul><li>将_config.yml中theme: landscape修改为theme: stellar,重新生成文件即可成功替换<img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E6%9B%BF%E6%8D%A2%E4%B8%BB%E9%A2%982.png" class=""></li></ul><h2 id="将Hexo文件部署到GitHub"><a href="#将Hexo文件部署到GitHub" class="headerlink" title="将Hexo文件部署到GitHub"></a>将Hexo文件部署到GitHub</h2><h3 id="创建GitHub公开仓库"><a href="#创建GitHub公开仓库" class="headerlink" title="创建GitHub公开仓库"></a>创建GitHub公开仓库</h3><ul><li>登录 GitHub,新建一个Repository,Repository name要是“用户名.github.io”<img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E9%83%A8%E7%BD%B2github1.png" class=""></li><li>仓库主页,复制仓库链接<img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/%E9%83%A8%E7%BD%B2github2.png" class=""></li></ul><h3 id="修改-config-yml文件-安装Git软件及插件"><a href="#修改-config-yml文件-安装Git软件及插件" class="headerlink" title="修改_config.yml文件,安装Git软件及插件"></a>修改_config.yml文件,安装Git软件及插件</h3><ul><li><p>修改_config.yml文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:<span class="comment">//github.com/Ashelyjiang/Ashelyjiang.github.io.git  // github仓库地址</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>安装Git软件,安装教程如链接所示</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//blog.csdn.net/weixin_42242910/article/details/136297201</span></span><br></pre></td></tr></table></figure></li><li><p>安装Git插件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>deployer<span class="operator">-</span>git <span class="operator">--</span>save</span><br></pre></td></tr></table></figure></li></ul><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><ul><li>以管理员身份打开,三部曲将文件上传到github<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo d <span class="comment">//部署主题</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取网址"><a href="#获取网址" class="headerlink" title="获取网址"></a>获取网址</h3><ul><li>打开个人仓库,点击Settings-Pages即可获取网址<img src="/img/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/url.png" class=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Excel绘制中国热力地图</title>
      <link href="/2024/11/01/%E7%BB%98%E5%88%B6%E4%B8%AD%E5%9B%BD%E7%83%AD%E5%8A%9B%E5%9C%B0%E5%9B%BE/"/>
      <url>/2024/11/01/%E7%BB%98%E5%88%B6%E4%B8%AD%E5%9B%BD%E7%83%AD%E5%8A%9B%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><ul><li>Excel365版本</li><li>WPS非会员安装VBA插件</li><li>将文档启用宏模式并另存为宏工作簿：文件-选项-信任中心-宏设置-启用VBA</li></ul><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><ul><li>2023年全国各省行政区人口数据</li><li>广东省2023年各市GDP数据</li></ul><h3 id="数据范围划分"><a href="#数据范围划分" class="headerlink" title="数据范围划分"></a>数据范围划分</h3><ul><li>方法1：直接利用分位数划分数据（直接用五分位数将全国人口数据划分为五等份，分界值&#x3D;ROUNDUP(PERCENTILE(数据所在列,分位点),0)）</li><li>方法2：结合数据实际，自定义数据范围（如本例的划分）</li></ul><h2 id="色块填充"><a href="#色块填充" class="headerlink" title="色块填充"></a>色块填充</h2><ul><li>颜色列文本框填充不同颜色</li></ul><h3 id="导入模板地图"><a href="#导入模板地图" class="headerlink" title="导入模板地图"></a>导入模板地图</h3><ul><li>可在<a href="https://datav.aliyun.com/portal/school/atlas/area_selector">阿里云地图</a>下载SVG格式的矢量地图模板,并导入excel</li><li>矢量地图各板块命名：在Excel右上角处逐一修改各省市模块名称。</li></ul><h3 id="VBA代码编辑"><a href="#VBA代码编辑" class="headerlink" title="VBA代码编辑"></a>VBA代码编辑</h3><ul><li>代码逻辑：遍历所有行，在每次循环中获取B列的人口数据，对其进行规则判断，取得对应规则单元格的背景色，用该背景色填充该行对应的省份名称形状。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sub</span> <span class="type">SetMapColor</span>()</span><br><span class="line"></span><br><span class="line">    <span class="type">Dim</span> i <span class="type">As</span> <span class="type">Integer</span>  &#x27; 定义变量</span><br><span class="line">    <span class="type">Dim</span> myColor <span class="type">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="type">Dim</span> dataSum <span class="type">As</span> <span class="type">Integer</span></span><br><span class="line">    </span><br><span class="line">    dataSum <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;A65535&quot;</span>).<span class="type">End</span>(xlUp).<span class="type">Row</span>  &#x27; 获取数据源的最后一行</span><br><span class="line"></span><br><span class="line">    <span class="type">For</span> i <span class="operator">=</span> <span class="number">2</span> <span class="type">To</span> dataSum  &#x27; 从第<span class="number">2</span>行开始遍历数据的所有行</span><br><span class="line">    </span><br><span class="line">        <span class="type">Select</span> <span class="type">Case</span> <span class="type">Range</span>(<span class="string">&quot;B&quot;</span> <span class="operator">&amp;</span> i).<span class="type">Value</span>   &#x27; 选择第<span class="number">2</span>列的值进行判断</span><br><span class="line">            <span class="type">Case</span> <span class="type">Is</span> <span class="operator">&lt;=</span> <span class="type">Range</span>(<span class="string">&quot;F3&quot;</span>).<span class="type">Value</span></span><br><span class="line">                myColor <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;D2&quot;</span>).<span class="type">Interior</span>.<span class="type">Color</span></span><br><span class="line">                </span><br><span class="line">            <span class="type">Case</span> <span class="type">Range</span>(<span class="string">&quot;F3&quot;</span>) <span class="type">To</span> <span class="type">Range</span>(<span class="string">&quot;F4&quot;</span>)  &#x27; <span class="type">F3和F4之间</span>,填充<span class="type">D3单元格背景色</span></span><br><span class="line">                myColor <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;D3&quot;</span>).<span class="type">Interior</span>.<span class="type">Color</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">Case</span> <span class="type">Range</span>(<span class="string">&quot;F4&quot;</span>) <span class="type">To</span> <span class="type">Range</span>(<span class="string">&quot;F5&quot;</span>)</span><br><span class="line">                myColor <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;D4&quot;</span>).<span class="type">Interior</span>.<span class="type">Color</span></span><br><span class="line">                </span><br><span class="line">            <span class="type">Case</span> <span class="type">Range</span>(<span class="string">&quot;F5&quot;</span>) <span class="type">To</span> <span class="type">Range</span>(<span class="string">&quot;F6&quot;</span>)</span><br><span class="line">                myColor <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;D5&quot;</span>).<span class="type">Interior</span>.<span class="type">Color</span></span><br><span class="line">                </span><br><span class="line">            <span class="type">Case</span> <span class="type">Else</span></span><br><span class="line">                myColor <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;D6&quot;</span>).<span class="type">Interior</span>.<span class="type">Color</span></span><br><span class="line">                </span><br><span class="line">        <span class="type">End</span> <span class="type">Select</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">ActiveSheet</span>.<span class="type">Shapes</span>(<span class="type">Range</span>(<span class="string">&quot;A&quot;</span> <span class="operator">&amp;</span> i).<span class="type">Value</span>).<span class="type">Fill</span>.<span class="type">ForeColor</span>.<span class="type">RGB</span> <span class="operator">=</span> myColor  &#x27; 根据形状名称选择形状并填充颜色</span><br><span class="line"></span><br><span class="line">        <span class="type">Next</span></span><br><span class="line">        </span><br><span class="line"><span class="type">End</span> <span class="type">Sub</span></span><br></pre></td></tr></table></figure><h2 id="添加地图标签"><a href="#添加地图标签" class="headerlink" title="添加地图标签"></a>添加地图标签</h2><h3 id="标签添加VBA代码编辑"><a href="#标签添加VBA代码编辑" class="headerlink" title="标签添加VBA代码编辑"></a>标签添加VBA代码编辑</h3><ul><li>给各省市模块添加名字，也可添加数据标签<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Sub</span> <span class="type">HeatMap_fill_text</span>()</span><br><span class="line"></span><br><span class="line">    <span class="type">Dim</span> cityName <span class="type">As</span> <span class="type">String</span>    &#x27; 定义名称</span><br><span class="line">    <span class="type">Dim</span> shapeObj <span class="type">As</span> shape</span><br><span class="line">    <span class="type">Dim</span> textBox <span class="type">As</span> shape</span><br><span class="line">    </span><br><span class="line">    dataSum <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;A65535&quot;</span>).<span class="type">End</span>(xlUp).<span class="type">Row</span>  &#x27; 获取数据源结束行</span><br><span class="line"></span><br><span class="line">    <span class="type">For</span> i <span class="operator">=</span> <span class="number">2</span> <span class="type">To</span> dataSum &#x27; 数据源的起始和结束行</span><br><span class="line">        cityName <span class="operator">=</span> <span class="type">Range</span>(<span class="string">&quot;A&quot;</span> <span class="operator">&amp;</span> i).<span class="type">Value</span> &#x27; 获取当前城市名称</span><br><span class="line">        <span class="type">Set</span> shapeObj <span class="operator">=</span> <span class="type">ActiveSheet</span>.<span class="type">Shapes</span>(cityName) &#x27; 获取形状对象</span><br><span class="line">        <span class="type">On</span> <span class="type">Error</span> <span class="type">GoTo</span> <span class="number">0</span> &#x27; 关闭错误处理</span><br><span class="line"></span><br><span class="line">        <span class="type">If</span> <span class="type">Not</span> shapeObj <span class="type">Is</span> <span class="type">Nothing</span> <span class="type">Then</span></span><br><span class="line">            &#x27; 在形状上添加文本框</span><br><span class="line">            <span class="type">Set</span> textBox <span class="operator">=</span> <span class="type">ActiveSheet</span>.<span class="type">Shapes</span>.<span class="type">AddTextbox</span>(msoTextOrientationHorizontal, <span class="keyword">_</span></span><br><span class="line">                    shapeObj.<span class="type">Left</span>, shapeObj.<span class="type">Top</span> <span class="operator">+</span> (shapeObj.<span class="type">Height</span> <span class="operator">/</span> <span class="number">2</span>) <span class="operator">-</span> <span class="number">10</span>, shapeObj.<span class="type">Width</span>, <span class="number">20</span>)</span><br><span class="line">            </span><br><span class="line">            &#x27; 设置文本框的内容为城市名称</span><br><span class="line">            textBox.<span class="type">TextFrame</span>.<span class="type">Characters</span>.<span class="type">Text</span> <span class="operator">=</span> cityName</span><br><span class="line">            </span><br><span class="line">            &#x27; 确保文本框中的文本可见并设置为楷体</span><br><span class="line">            <span class="type">With</span> textBox.<span class="type">TextFrame</span>.<span class="type">Characters</span></span><br><span class="line">                .<span class="type">Font</span>.<span class="type">Name</span> <span class="operator">=</span> <span class="string">&quot;华文楷体&quot;</span> &#x27; 设置字体为华文楷体</span><br><span class="line">                .<span class="type">Font</span>.<span class="type">Size</span> <span class="operator">=</span> <span class="number">6</span> &#x27; 字体大小</span><br><span class="line">                .<span class="type">Font</span>.<span class="type">Color</span> <span class="operator">=</span> <span class="type">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &#x27; 字体颜色（黑色）</span><br><span class="line">            <span class="type">End</span> <span class="type">With</span></span><br><span class="line">            </span><br><span class="line">            &#x27; 使文本框的背景透明</span><br><span class="line">            textBox.<span class="type">Fill</span>.<span class="type">Visible</span> <span class="operator">=</span> msoFalse &#x27; 使文本框的背景透明</span><br><span class="line">            </span><br><span class="line">            &#x27; 去掉文本框的边框</span><br><span class="line">            textBox.<span class="type">Line</span>.<span class="type">Visible</span> <span class="operator">=</span> msoFalse &#x27; 隐藏文本框边框</span><br><span class="line">            </span><br><span class="line">            &#x27; 将文本框的对齐方式设置为居中</span><br><span class="line">            textBox.<span class="type">TextFrame</span>.<span class="type">HorizontalAlignment</span> <span class="operator">=</span> xlHAlignCenter</span><br><span class="line">            textBox.<span class="type">TextFrame</span>.<span class="type">VerticalAlignment</span> <span class="operator">=</span> xlVAlignCenter</span><br><span class="line">        <span class="type">Else</span></span><br><span class="line">            <span class="type">MsgBox</span> <span class="string">&quot;未找到名为 &quot;</span> <span class="operator">&amp;</span> cityName <span class="operator">&amp;</span> <span class="string">&quot; 的形状！&quot;</span></span><br><span class="line">        <span class="type">End</span> <span class="type">If</span></span><br><span class="line">    <span class="type">Next</span> i</span><br><span class="line"><span class="type">End</span> <span class="type">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="标签删除VBA代码编辑"><a href="#标签删除VBA代码编辑" class="headerlink" title="标签删除VBA代码编辑"></a>标签删除VBA代码编辑</h3><ul><li>删除地图形状的所有文本框,即文本标签<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Sub</span> <span class="type">DeleteAllTextBoxes</span>()</span><br><span class="line">    <span class="type">ActiveSheet</span>.<span class="type">TextBoxes</span>.<span class="type">Delete</span></span><br><span class="line"><span class="type">End</span> <span class="type">Sub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="添加表单控件"><a href="#添加表单控件" class="headerlink" title="添加表单控件"></a>添加表单控件</h2><ul><li>开发工具-插入-表单空间-第一个工具</li><li>右键单击控件-指定宏-选中对应的宏进行绑定，点击控件进行宏操作。</li></ul><h2 id="Excel技巧"><a href="#Excel技巧" class="headerlink" title="Excel技巧"></a>Excel技巧</h2><ul><li>选中所有文本框OR图像形状：Crtl+G–定位条件-对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VBA项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信聊天记录可视化</title>
      <link href="/2024/09/26/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2024/09/26/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>谨慎食用</p><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h3 id="电脑端迁移聊天记录"><a href="#电脑端迁移聊天记录" class="headerlink" title="电脑端迁移聊天记录"></a>电脑端迁移聊天记录</h3><ul><li>迁移手机和接收电脑设置在同一局域网内【手机电脑连同一WiFi】</li><li>微信-通用-聊天记录-聊天记录迁移与备份-迁移-迁移到电脑【可选迁移全部聊天记录】或【迁移指定聊天记录】</li><li>确认电脑端聊天记录是否成功，若成功，手机退出微信运行，重启打开。</li></ul><h3 id="下载留痕软件-获取电脑端微信聊天记录"><a href="#下载留痕软件-获取电脑端微信聊天记录" class="headerlink" title="下载留痕软件 获取电脑端微信聊天记录"></a>下载留痕软件 获取电脑端微信聊天记录</h3><ul><li><a href="https://memotrace.cn/">开源软件留痕下载地址</a>，选择对应下载版本。【好像只支持Windows版本，mac系统的姐妹收手吧】 </li><li>运行文件中的MemoTrace.exe-获取信息-点击解析 等待数据解析完成即可。</li><li>点击好友-再点击好友对象，即可获取与好友的聊天信息分析。<br>PS：如果发现信息解析不完全，但确认聊天记录已在电脑端，退出电脑微信重新登录且关闭MemoTrace.exe，重新开启解析即可。</li></ul><h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><ul><li>程序开源作者已经提供初步的分析,但如果想要更细致更个性化的分析,可导出数据自行分析。点击聊天记录导出-导出CSV，【但导出的csv数据只有聊天文字信息】</li><li>导出数据如下图所示：<img src="/img/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%8F%AF%E8%A7%86%E5%8C%96/exe%E5%AF%BC%E5%87%BA%E8%AE%B0%E5%BD%95.png" class=""></li></ul><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas as pd</span><br><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot as plt</span><br><span class="line">from scipy.interpolate <span class="keyword">import</span> make_interp_spline</span><br><span class="line"><span class="keyword">import</span> seaborn as sns</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">from wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line">from collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">from aip <span class="keyword">import</span> AipNlp</span><br><span class="line">from snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">from datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pptx</span><br><span class="line">from spire.presentation <span class="keyword">import</span> *</span><br><span class="line">from spire.presentation.common <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"># 使用<span class="type">SimHei字体支持中文显示</span></span><br><span class="line">plt.rcParams[&#x27;font.sans<span class="operator">-</span>serif&#x27;] <span class="operator">=</span> [&#x27;<span class="type">KaiTi</span>&#x27;]  # 设置默认字体为 <span class="type">KaiTi</span></span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;] <span class="operator">=</span> <span class="type">False</span>    # 解决负号显示问题</span><br></pre></td></tr></table></figure><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><p>– 前6个字段数据类型为int64,后面字段数据类型为object。<br>– Type: 发送内容的类型<br>– IsSender: 是否是自己发出的消息，也就是标记消息展示在对话页左边还是右边，取值0或1。<br>– StrContent：信息内容<br>– StrTime: 信息发送时间<br>– Remark: 微信备注<br>– NickName: 微信昵称</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data <span class="operator">=</span> pd.read_csv(&#x27;子一.csv&#x27;)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><img src="/img/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96.png" class=""><ul><li>生成保存图片的文件夹<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 检查文件夹是否存在,如果文件夹不存在,则创建</span><br><span class="line"></span><br><span class="line">folder_path <span class="operator">=</span> &#x27;图片信息&#x27;</span><br><span class="line"><span class="keyword">if</span> not os.path.exists(folder_path):</span><br><span class="line">    os.makedirs(folder_path)</span><br></pre></td></tr></table></figure></li></ul><h4 id="图像绘制函数"><a href="#图像绘制函数" class="headerlink" title="图像绘制函数"></a>图像绘制函数</h4><p>PS：因为下面分析会多次用到下面图像绘制函数,因此先定义图像函数,后面直接调用即可。</p><ul><li><p>获取字典中值最大的数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 统计谁最多,res字典格式</span><br><span class="line"></span><br><span class="line">def <span class="type">Get_most_Value</span>(res):</span><br><span class="line">    </span><br><span class="line">    res_key <span class="operator">=</span> <span class="built_in">max</span>(res, key<span class="operator">=</span>res.get)</span><br><span class="line">    res_value <span class="operator">=</span> res[res_key]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res_key,res_value</span><br></pre></td></tr></table></figure></li><li><p>获取词频前20个使用频率最高的词汇</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def <span class="type">Get_top20</span>(res):</span><br><span class="line">    top_20 <span class="operator">=</span> dict(sorted(res.items(), key<span class="operator">=</span>lambda item: item[<span class="number">1</span>], reverse<span class="operator">=</span><span class="type">True</span>)[:<span class="number">20</span>])</span><br><span class="line">    <span class="keyword">return</span> top_20</span><br></pre></td></tr></table></figure></li><li><p>绘制词云图函数<br>PS：停用词库需下载且放在与py文件同一路径下。若词云图显示字体报错,可查看系统是否安装simkai.ttf字体。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 绘制词云图</span><br><span class="line"></span><br><span class="line">def <span class="type">Draw_Yuntu</span>(content,pic_path<span class="operator">=</span><span class="type">None</span>):</span><br><span class="line">    </span><br><span class="line">    # 去掉字符串中的所有符号</span><br><span class="line">    text <span class="operator">=</span> re.sub(r&#x27;[<span class="operator">^</span>\w\s]&#x27;, &#x27;&#x27;, content.replace(&#x27;\n&#x27;,&#x27;&#x27;) )</span><br><span class="line"></span><br><span class="line">    # 使用jieba进行中文分词</span><br><span class="line">    words <span class="operator">=</span> jieba.cut(text, cut_all<span class="operator">=</span><span class="type">False</span>)</span><br><span class="line"></span><br><span class="line">    # 去掉停用词且去掉单字</span><br><span class="line">    ## 读取停用词</span><br><span class="line">    with <span class="keyword">open</span>(&#x27;停用词库.txt&#x27;, encoding<span class="operator">=</span>&#x27;utf<span class="operator">-</span><span class="number">8</span>&#x27;) <span class="keyword">as</span> f:  # 可根据需要打开停用词库，然后加上不想显示的词语</span><br><span class="line">        con <span class="operator">=</span> f.readlines()</span><br><span class="line">        stop_words <span class="operator">=</span> <span class="keyword">set</span>() # 集合可以去重</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> con:</span><br><span class="line">            i <span class="operator">=</span> i.replace(<span class="string">&quot;<span class="subst">\n</span>&quot;</span>, <span class="string">&quot; &quot;</span>)   # 去掉读取每一行数据的\n</span><br><span class="line">            stop_words.add(i)</span><br><span class="line">    stop_words</span><br><span class="line"></span><br><span class="line">    # 去掉停用词和单字</span><br><span class="line">    words_res <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> word not <span class="keyword">in</span> stop_words and len(word) <span class="operator">!=</span> <span class="number">1</span>:</span><br><span class="line">            words_res.append(word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 计算词频</span><br><span class="line">    word_list <span class="operator">=</span> <span class="type">Counter</span>(words_res)</span><br><span class="line"></span><br><span class="line">    # 生成词云</span><br><span class="line">    wordcloud <span class="operator">=</span> <span class="type">WordCloud</span>(</span><br><span class="line">        font_path<span class="operator">=</span>&#x27;simkai.ttf&#x27;,  # 确保字体路径正确</span><br><span class="line">        width<span class="operator">=</span><span class="number">800</span>,</span><br><span class="line">        height<span class="operator">=</span><span class="number">400</span>,</span><br><span class="line">        background_color<span class="operator">=</span>&#x27;white&#x27;  # 图片背景颜色</span><br><span class="line">    ).generate_from_frequencies(word_list)</span><br><span class="line"></span><br><span class="line">    # 显示词云图</span><br><span class="line">    plt.figure(figsize<span class="operator">=</span>(<span class="number">16</span>, <span class="number">8</span>))</span><br><span class="line">    plt.imshow(wordcloud, interpolation<span class="operator">=</span>&#x27;bilinear&#x27;)</span><br><span class="line">    plt.axis(&#x27;off&#x27;)  # 关闭坐标轴</span><br><span class="line">    </span><br><span class="line">    # 如果有图片路径传入,则保存图片,反之不保存<span class="operator">。</span></span><br><span class="line">    <span class="keyword">if</span> pic_path:</span><br><span class="line">        plt.savefig(pic_path, bbox_inches<span class="operator">=</span>&#x27;tight&#x27;, pad_inches<span class="operator">=</span><span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    # 绘制图像</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> word_list</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>绘制平滑曲线函数<br>PS：注意pic_path参数，传入路径参数，则保存图片;反之，不保存。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 绘制平滑曲线图</span><br><span class="line"></span><br><span class="line">def <span class="type">Draw_Linegraph</span>(top_20,title_res,pic_path<span class="operator">=</span><span class="type">None</span>):</span><br><span class="line">    </span><br><span class="line">    x <span class="operator">=</span> list( top_20.keys())</span><br><span class="line">    y <span class="operator">=</span>  list( top_20.values())</span><br><span class="line">    </span><br><span class="line">    x_new <span class="operator">=</span> np.linspace(<span class="number">0</span>, len(x) <span class="operator">-</span> <span class="number">1</span>, <span class="number">300</span>)  # <span class="number">300</span>个点进行插值</span><br><span class="line">    spl <span class="operator">=</span> make_interp_spline(np.arange(len(x)), y, k<span class="operator">=</span><span class="number">3</span>)  # 使用样条插值</span><br><span class="line">    y_new <span class="operator">=</span> spl(x_new)</span><br><span class="line"></span><br><span class="line">    # 创建折线图</span><br><span class="line">    plt.figure(figsize<span class="operator">=</span>(<span class="number">20</span>,<span class="number">6</span>))  # 调整图像大小</span><br><span class="line">    plt.plot(x_new, y_new, color<span class="operator">=</span>&#x27;b&#x27;, label<span class="operator">=</span>&#x27;数据线&#x27;, linewidth<span class="operator">=</span><span class="number">2</span>)  # 更平滑的曲线</span><br><span class="line"></span><br><span class="line">    # 添加标题和标签</span><br><span class="line">    plt.title(title_res, fontsize<span class="operator">=</span><span class="number">24</span>)</span><br><span class="line">    plt.xlabel(&#x27;&#x27;)</span><br><span class="line">    plt.ylabel(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    # 设置横坐标刻度</span><br><span class="line">    plt.xticks(ticks<span class="operator">=</span>np.arange(len(x)), labels<span class="operator">=</span>x, rotation<span class="operator">=</span><span class="number">45</span>, fontsize<span class="operator">=</span><span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    # 设置<span class="type">X轴的范围，减少标签之间的空隙</span></span><br><span class="line">    plt.xlim(<span class="operator">-</span><span class="number">0.5</span>, len(x) <span class="operator">-</span> <span class="number">0.5</span>)  # 调整<span class="type">X轴范围</span></span><br><span class="line"></span><br><span class="line">    # 隐藏所有网格线</span><br><span class="line">    plt.grid(<span class="type">False</span>)  # 关闭网格线</span><br><span class="line"></span><br><span class="line">    # 显示图形</span><br><span class="line">    plt.tight_layout()  # 自动调整子图参数，使之填充整个图像区域</span><br><span class="line">    </span><br><span class="line">    # 如果有图片路径传入,则保存图片,反之不保存<span class="operator">。</span></span><br><span class="line">    <span class="keyword">if</span> pic_path:</span><br><span class="line">        plt.savefig(pic_path)</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></li><li><p>绘制热力图函数<br>PS：注意pic_path参数，传入路径参数，则保存图片;反之，不保存。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def <span class="type">Draw_Heatmap</span>(pic_data,pic_path<span class="operator">=</span><span class="type">None</span>):</span><br><span class="line"></span><br><span class="line">    # 绘制热力图</span><br><span class="line">    plt.figure(figsize<span class="operator">=</span>(<span class="number">20</span>,<span class="number">6</span>))  # 将图像调整为更大的正方形尺寸</span><br><span class="line">    sns.heatmap(pic_data, annot<span class="operator">=</span><span class="type">False</span>, cmap<span class="operator">=</span>&#x27;<span class="type">YlGnBu</span>&#x27;, cbar<span class="operator">=</span><span class="type">True</span>, square<span class="operator">=</span><span class="type">True</span>, </span><br><span class="line">                cbar_kws<span class="operator">=</span>&#123;&#x27;shrink&#x27;: <span class="number">0.5</span>&#125;)  # 调整颜色条大小，shrink 控制缩小比例</span><br><span class="line"></span><br><span class="line">    # 设置图表标签</span><br><span class="line">    plt.title(&#x27;热力图&#x27;)</span><br><span class="line">    plt.xlabel(&#x27;&#x27;)</span><br><span class="line">    plt.ylabel(&#x27;&#x27;)</span><br><span class="line">    </span><br><span class="line">    # 如果有图片路径传入,则保存图片,反之不保存<span class="operator">。</span></span><br><span class="line">    <span class="keyword">if</span> pic_path:</span><br><span class="line">        plt.savefig(pic_path)</span><br><span class="line"></span><br><span class="line">    # 显示图表</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">None</span></span><br></pre></td></tr></table></figure></li><li><p>绘制饼图函数<br>PS：注意pic_path参数，传入路径参数，则保存图片;反之，不保存。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def <span class="type">Draw_Piechart</span>(res,res_title,pic_path<span class="operator">=</span><span class="type">None</span>):</span><br><span class="line">    </span><br><span class="line">    labels <span class="operator">=</span> res.keys()</span><br><span class="line">    counts <span class="operator">=</span> res.values()</span><br><span class="line">    </span><br><span class="line">    # 随机颜色列表</span><br><span class="line">    colors <span class="operator">=</span> [<span class="string">&quot;darkorange&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;navajowhite&quot;</span>, <span class="string">&quot;bisque&quot;</span>, <span class="string">&quot;antiquewhite&quot;</span>, <span class="string">&quot;cornsilk&quot;</span>, <span class="string">&quot;lightyellow&quot;</span>]</span><br><span class="line">    random.shuffle(colors)</span><br><span class="line">    </span><br><span class="line">    plt.title(res_title)</span><br><span class="line">    plt.pie(counts, labels<span class="operator">=</span>labels, colors<span class="operator">=</span>colors[:len(labels)], autopct<span class="operator">=</span>&#x27;<span class="operator">%</span><span class="number">1</span>.1f<span class="operator">%%</span>&#x27;, startangle<span class="operator">=</span><span class="number">140</span>)</span><br><span class="line">    plt.legend(labels, title<span class="operator">=</span><span class="string">&quot;图例&quot;</span>, loc<span class="operator">=</span>&#x27;upper left&#x27;, bbox_to_anchor<span class="operator">=</span>(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    # 如果有图片路径传入,则保存图片,反之不保存<span class="operator">。</span></span><br><span class="line">    <span class="keyword">if</span> pic_path:</span><br><span class="line">        plt.savefig(pic_path)</span><br><span class="line">    </span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure></li><li><p>分析文本情感倾向分析函数<br>– 调用百度云API免费接口进行文本情感分析<br>PS：百度云API需注册验证获取API密钥，可免费调用50万次。<a href="https://cloud.baidu.com/?from=console">注册地址</a><br>调用返回文本判定信息三种：积极、消极、中性，准确率较高，但调用速度慢,1小时处理1500条左右。<br> 安装百度云API接口包：pip install baidu-aip </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def word_mean(text):</span><br><span class="line"></span><br><span class="line">    # 初始化<span class="type">AipNlp对象</span></span><br><span class="line">    <span class="type">APP_ID</span> <span class="operator">=</span> &#x27;自己申请注册的<span class="type">APP_ID</span>&#x27;</span><br><span class="line">    <span class="type">API_KEY</span> <span class="operator">=</span> &#x27;自己申请注册的 <span class="type">API_KEY</span> &#x27;</span><br><span class="line">    <span class="type">SECRET_KEY</span> <span class="operator">=</span> &#x27;自己申请注册的<span class="type">SECRET_KEY</span>&#x27;</span><br><span class="line">    </span><br><span class="line">    client <span class="operator">=</span> <span class="type">AipNlp</span>(<span class="type">APP_ID</span>, <span class="type">API_KEY</span>, <span class="type">SECRET_KEY</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 如果有可选参数 &quot;&quot;&quot;</span></span><br><span class="line">    options <span class="operator">=</span> &#123;&#125;</span><br><span class="line">    options[<span class="string">&quot;scene&quot;</span>] <span class="operator">=</span> <span class="string">&quot;talk&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 带参数调用对话情绪识别接口 &quot;&quot;&quot;</span></span><br><span class="line">    res <span class="operator">=</span> client.emotion(text, options)</span><br><span class="line">    res <span class="operator">=</span> &#123;item[&#x27;label&#x27;]: item[&#x27;prob&#x27;] <span class="keyword">for</span> item <span class="keyword">in</span> res[&#x27;items&#x27;]&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul><p>– 使用SnowNLP包<br>安装第三方库：pip install snownlp<br>完全免费且速度较快，但准确率不高，且只返回两种类型：积极和消极，可使用自定义词语进行模型训练，提高准确度。<br> 感觉可先调用百度云API获取部分数据的结果并将其喂给SnowNLP，但因为懒没展开这部分 ，具体可参考CSDN文章。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 使用<span class="type">SnowNLP对中文文本进行情感分析</span></span><br><span class="line"></span><br><span class="line">def sentiment_analysis(text):</span><br><span class="line"></span><br><span class="line">    s <span class="operator">=</span> <span class="type">SnowNLP</span>(text)</span><br><span class="line">    </span><br><span class="line">    # <span class="type">SnowNLP的sentiments方法返回情感倾向分数，越接近1表明情感越积极，越接近0表明情感越消极</span></span><br><span class="line">    sentiment_score <span class="operator">=</span> s.sentiments</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sentiment_score  # 返回一个数字</span><br></pre></td></tr></table></figure><h3 id="数据总计分析"><a href="#数据总计分析" class="headerlink" title="数据总计分析"></a>数据总计分析</h3><h4 id="加微信时间"><a href="#加微信时间" class="headerlink" title="加微信时间"></a>加微信时间</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># strtime数据类型为对象,转换为时间格式</span><br><span class="line">data[&#x27;<span class="type">StrTime</span>&#x27;] <span class="operator">=</span> pd.to_datetime(data[&#x27;<span class="type">StrTime</span>&#x27;], format<span class="operator">=</span>&#x27;<span class="operator">%</span><span class="type">Y</span><span class="operator">-%</span>m<span class="operator">-%</span>d <span class="operator">%</span>H:<span class="operator">%</span>M:<span class="operator">%</span><span class="type">S</span>&#x27;)</span><br><span class="line"></span><br><span class="line"># <span class="number">1</span>.第一条聊天的信息，即<span class="type">StrTime最小的数</span></span><br><span class="line">the_first_time <span class="operator">=</span> np.min(data[&#x27;<span class="type">StrTime</span>&#x27;])</span><br><span class="line">the_first_time</span><br></pre></td></tr></table></figure><h4 id="相识多少天"><a href="#相识多少天" class="headerlink" title="相识多少天"></a>相识多少天</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">2</span>.距离今天是多少天</span><br><span class="line">from datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">days_difference <span class="operator">=</span> (datetime.today() <span class="operator">-</span> the_first_time).days</span><br><span class="line">days_difference</span><br></pre></td></tr></table></figure><h4 id="聊天数"><a href="#聊天数" class="headerlink" title="聊天数"></a>聊天数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">3</span>.聊天天数：每天唯一值的计数</span><br><span class="line">chat_days <span class="operator">=</span> len(np.unique(data[&#x27;<span class="type">StrTime</span>&#x27;].dt.date))</span><br><span class="line">chat_days</span><br></pre></td></tr></table></figure><h4 id="信息发送数"><a href="#信息发送数" class="headerlink" title="信息发送数"></a>信息发送数</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 发送总条数</span><br><span class="line">data_num <span class="operator">=</span> len(data)</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>.总共相互发送信息条数</span><br><span class="line">every_chat_num <span class="operator">=</span> data.groupby(data[&#x27;<span class="type">IsSender</span>&#x27;])[&#x27;<span class="type">IsSender</span>&#x27;].count()</span><br><span class="line"></span><br><span class="line"># <span class="type">IsSender等于1</span>,为微信本人；<span class="type">IsSender等于0</span>,为对话者</span><br><span class="line"># 在dataframe中随机抽取一条微信本人的信息数据,获取微信本人昵称叫什么</span><br><span class="line"><span class="type">NickName_myself</span> <span class="operator">=</span> data[data[&#x27;<span class="type">IsSender</span>&#x27;] <span class="operator">==</span> <span class="number">1</span>].sample(n<span class="operator">=</span><span class="number">1</span>).loc[:,&#x27;<span class="type">NickName</span>&#x27;].values[<span class="number">0</span>]</span><br><span class="line"><span class="type">NickName_other</span> <span class="operator">=</span> data[data[&#x27;<span class="type">IsSender</span>&#x27;] <span class="operator">==</span> <span class="number">0</span>].sample(n<span class="operator">=</span><span class="number">1</span>).loc[:,&#x27;<span class="type">NickName</span>&#x27;].values[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"># 使用字典来重命名索引</span><br><span class="line">every_chat_num.index <span class="operator">=</span> every_chat_num.index.map(&#123;<span class="number">0</span>: <span class="type">NickName_other</span>, <span class="number">1</span>: <span class="type">NickName_myself</span>&#125;)</span><br><span class="line">every_chat_num</span><br></pre></td></tr></table></figure><h4 id="每天聊天情况"><a href="#每天聊天情况" class="headerlink" title="每天聊天情况"></a>每天聊天情况</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">5</span>.每天聊天信息</span><br><span class="line"></span><br><span class="line">heatmap_data <span class="operator">=</span> data.groupby([data[&#x27;<span class="type">StrTime</span>&#x27;].dt.isocalendar().week,data[&#x27;<span class="type">StrTime</span>&#x27;].dt.weekday])[&#x27;<span class="type">Sender</span>&#x27;].count().reset_index()</span><br><span class="line">heatmap_data <span class="operator">=</span> pd.<span class="type">DataFrame</span>(heatmap_data)</span><br><span class="line"></span><br><span class="line">pivot_table <span class="operator">=</span> heatmap_data.pivot(index<span class="operator">=</span>&#x27;<span class="type">StrTime</span>&#x27;, columns<span class="operator">=</span> &#x27;week&#x27;, values<span class="operator">=</span>&#x27;<span class="type">Sender</span>&#x27;)</span><br><span class="line">pivot_table <span class="operator">=</span> pivot_table.fillna(<span class="number">0</span>).astype(int)</span><br><span class="line"></span><br><span class="line">pivot_table.index <span class="operator">=</span> pivot_table.index.map(&#123;</span><br><span class="line">    <span class="number">0</span>: &#x27;星期一&#x27;,</span><br><span class="line">    <span class="number">1</span>: &#x27;星期二&#x27;,</span><br><span class="line">    <span class="number">2</span>: &#x27;星期三&#x27;,</span><br><span class="line">    <span class="number">3</span>: &#x27;星期四&#x27;,</span><br><span class="line">    <span class="number">4</span>: &#x27;星期五&#x27;,</span><br><span class="line">    <span class="number">5</span>: &#x27;星期六&#x27;,</span><br><span class="line">    <span class="number">6</span>: &#x27;星期日&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">pivot_table</span><br><span class="line"></span><br><span class="line"># 绘制热力图</span><br><span class="line"><span class="type">Draw_Heatmap</span>(pivot_table)</span><br></pre></td></tr></table></figure><img src="/img/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%8F%AF%E8%A7%86%E5%8C%96/%E7%83%AD%E5%8A%9B%E5%9B%BE.png" class=""><h4 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h4><ul><li>文字总数<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">6</span>.所有文本信息字数</span><br><span class="line">all_text <span class="operator">=</span> data[data[&#x27;<span class="type">Type</span>&#x27;] <span class="operator">==</span> <span class="number">1</span>][&#x27;<span class="type">StrContent</span>&#x27;].dropna().astype(str).tolist()</span><br><span class="line">content <span class="operator">=</span> &#x27;&#x27;.join(all_text)</span><br><span class="line"></span><br><span class="line">total_str_count <span class="operator">=</span> len(content)</span><br><span class="line">total_str_count</span><br></pre></td></tr></table></figure></li><li>绘制文本信息词云图<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 绘制词云图</span><br><span class="line">content_word_pic_path <span class="operator">=</span> os.path.join(folder_path,&#x27;全部聊天词云图.png&#x27;)</span><br><span class="line">content_word_list <span class="operator">=</span> <span class="type">Draw_Yuntu</span>(content,content_word_pic_path)</span><br><span class="line"></span><br><span class="line">max_content_word_list_key,max_content_word_list_value  <span class="operator">=</span> <span class="type">Get_most_Value</span>(content_word_list)</span><br><span class="line">max_content_word_list_key,max_content_word_list_value</span><br></pre></td></tr></table></figure><img src="/img/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%8F%AF%E8%A7%86%E5%8C%96/%E8%AF%8D%E4%BA%91%E5%9B%BE.png" class=""></li><li>常用词频统计<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 最常说的<span class="number">20</span>个词</span><br><span class="line">content_word_list_top_20 <span class="operator">=</span> <span class="type">Get_top20</span>(content_word_list)</span><br><span class="line">content_word_list_top_20</span><br><span class="line"></span><br><span class="line"># 绘制图像</span><br><span class="line"><span class="type">Draw_Linegraph</span>(content_word_list_top_20,&#x27;前<span class="number">20</span>个最常发的词&#x27;)</span><br></pre></td></tr></table></figure><img src="/img/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%8F%AF%E8%A7%86%E5%8C%96/%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1%E5%9B%BE.png" class=""></li><li>文本情感分析<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 文本情感分析<span class="type">SnowNLP版本</span>,返回一个数</span><br><span class="line"></span><br><span class="line">res_final <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_text:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res_pro <span class="operator">=</span> sentiment_analysis(i)</span><br><span class="line">        <span class="keyword">if</span> res_pro <span class="operator">&gt;=</span> <span class="number">0.5</span>:</span><br><span class="line">            res_final.append(&#x27;积极&#x27;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res_final.append(&#x27;消极&#x27;)</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line">sentiment_analysis_res <span class="operator">=</span> <span class="type">Counter</span>(res_final)</span><br><span class="line">sentiment_analysis_res</span><br><span class="line"></span><br><span class="line"><span class="type">Draw_Piechart</span>(sentiment_analysis_res,&#x27;文本情感倾向分析&#x27;)</span><br></pre></td></tr></table></figure><img src="/img/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%96%87%E6%9C%AC%E6%83%85%E6%84%9F%E5%80%BE%E5%90%91%E5%9B%BE.png" class=""></li></ul><h3 id="详细信息分析"><a href="#详细信息分析" class="headerlink" title="详细信息分析"></a>详细信息分析</h3><h4 id="聊天最多的一天"><a href="#聊天最多的一天" class="headerlink" title="聊天最多的一天"></a>聊天最多的一天</h4><ul><li>获取该天日期<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 生成每天聊天信息记录</span><br><span class="line">day_chat_counts <span class="operator">=</span> data.groupby([data[&#x27;<span class="type">StrTime</span>&#x27;].dt.date])[&#x27;<span class="type">Sender</span>&#x27;].count().to_dict()</span><br><span class="line"></span><br><span class="line"># <span class="number">1</span>.聊天最多的一天及该天的信息数</span><br><span class="line">max_day_chat_counts_key,max_day_chat_counts_value <span class="operator">=</span> <span class="type">Get_most_Value</span>(day_chat_counts)</span><br><span class="line">max_day_chat_counts_key,max_day_chat_counts_value</span><br><span class="line">max_day_chat_day <span class="operator">=</span> max_day_chat_counts_key.strftime(<span class="string">&quot;%Y年%m月%d日&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>查看文本内容并绘制云图<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">2</span>.查看聊天最多一天的信息内容</span><br><span class="line"># 获取聊天最多一天的数据</span><br><span class="line">max_day_chat_df <span class="operator">=</span> data[data[&#x27;<span class="type">StrTime</span>&#x27;].dt.date <span class="operator">==</span> max_day_chat_counts_key]</span><br><span class="line"></span><br><span class="line"># 获取文本信息作词频分析</span><br><span class="line">max_day_chat_content <span class="operator">=</span> &#x27;&#x27;.join(max_day_chat_df[max_day_chat_df[&#x27;<span class="type">Type</span>&#x27;] <span class="operator">==</span> <span class="number">1</span>][&#x27;<span class="type">StrContent</span>&#x27;].dropna().astype(str).tolist())</span><br><span class="line"></span><br><span class="line"># 绘制词云图</span><br><span class="line">max_day_chat_pic_path <span class="operator">=</span> os.path.join(folder_path,&#x27;最多聊天词云图.png&#x27;)</span><br><span class="line">max_day_chat_word_list <span class="operator">=</span> <span class="type">Draw_Yuntu</span>(max_day_chat_content,max_day_chat_pic_path)</span><br></pre></td></tr></table></figure></li><li>词频统计并绘制平滑曲线图<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">max_day_chat_word_list_key,max_day_chat_word_list_value  <span class="operator">=</span> <span class="type">Get_most_Value</span>(max_day_chat_word_list)</span><br><span class="line">max_day_chat_word_list_key,max_day_chat_word_list_value</span><br><span class="line"></span><br><span class="line">max_day_chat_word_list_top_20 <span class="operator">=</span> <span class="type">Get_top20</span>(max_day_chat_word_list)</span><br><span class="line">max_day_chat_word_list_top_20</span><br><span class="line"></span><br><span class="line"><span class="type">Draw_Linegraph</span>(max_day_chat_word_list_top_20,&#x27;前<span class="number">20</span>个最常发的词&#x27;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="各自发送的信息分析"><a href="#各自发送的信息分析" class="headerlink" title="各自发送的信息分析"></a>各自发送的信息分析</h4><ul><li>自己发送的信息分析<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 获取自己发送的数据</span><br><span class="line">data_myself <span class="operator">=</span> data[data[&#x27;<span class="type">IsSender</span>&#x27;] <span class="operator">==</span> <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"># 获取文本信息作词频分析</span><br><span class="line">data_myself_chat_content <span class="operator">=</span> &#x27;&#x27;.join(data_myself[data_myself[&#x27;<span class="type">Type</span>&#x27;] <span class="operator">==</span> <span class="number">1</span>][&#x27;<span class="type">StrContent</span>&#x27;].dropna().astype(str).tolist())</span><br><span class="line"></span><br><span class="line"># 绘制词云图</span><br><span class="line">data_myself_chat_word_list <span class="operator">=</span> <span class="type">Draw_Yuntu</span>(data_myself_chat_content)</span><br><span class="line"></span><br><span class="line"># 获取前<span class="number">20</span>个最常说的词汇</span><br><span class="line">data_myself_chat_word_list_top_20 <span class="operator">=</span> <span class="type">Get_top20</span>(data_myself_chat_word_list)</span><br><span class="line">data_myself_chat_word_list_top_20</span><br><span class="line"></span><br><span class="line"><span class="type">Draw_Linegraph</span>(data_myself_chat_word_list_top_20,&#x27;前<span class="number">20</span>个最常发的词&#x27;)</span><br></pre></td></tr></table></figure></li><li>对面发送的信息分析<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 获取对面发送的数据</span><br><span class="line"></span><br><span class="line">data_other <span class="operator">=</span> data[data[&#x27;<span class="type">IsSender</span>&#x27;] <span class="operator">==</span> <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"># 获取文本信息作词频分析</span><br><span class="line">data_other_chat_content <span class="operator">=</span> &#x27;&#x27;.join(data_other[data_other[&#x27;<span class="type">Type</span>&#x27;] <span class="operator">==</span> <span class="number">1</span>][&#x27;<span class="type">StrContent</span>&#x27;].dropna().astype(str).tolist())</span><br><span class="line"></span><br><span class="line"># 绘制词云图</span><br><span class="line">data_other_chat_word_list <span class="operator">=</span> <span class="type">Draw_Yuntu</span>(data_other_chat_content)</span><br><span class="line"></span><br><span class="line"># 获取前<span class="number">20</span>个最常说的词汇</span><br><span class="line">data_other_chat_word_list_top_20 <span class="operator">=</span> <span class="type">Get_top20</span>(data_other_chat_word_list)</span><br><span class="line">data_other_chat_word_list_top_20</span><br><span class="line"></span><br><span class="line"><span class="type">Draw_Linegraph</span>(data_other_chat_word_list_top_20,&#x27;前<span class="number">20</span>个最常发的词&#x27;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="最常聊天时段"><a href="#最常聊天时段" class="headerlink" title="最常聊天时段"></a>最常聊天时段</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 聊天时段划分</span><br><span class="line">def get_active_time(x):</span><br><span class="line">    start_hour <span class="operator">=</span>  (x.time().hour <span class="comment">// 2) * 2 </span></span><br><span class="line">    end_hour <span class="operator">=</span> start_hour <span class="operator">+</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> f<span class="string">&quot;&#123;start_hour:02&#125;:00 - &#123;end_hour:02&#125;:00&quot;</span></span><br><span class="line">    </span><br><span class="line">data[&#x27;active_time&#x27;] <span class="operator">=</span> list(map(lambda x : get_active_time(x), data[&#x27;<span class="type">StrTime</span>&#x27;]))</span><br><span class="line">time_counts <span class="operator">=</span> <span class="type">Counter</span>(data[&#x27;active_time&#x27;])</span><br><span class="line">most_common_time <span class="operator">=</span> time_counts.most_common(<span class="number">1</span>)[<span class="number">0</span>]   # 返回计数前面<span class="number">1</span>个最多的结果，结果为元组,<span class="number">2</span>就是返回前面最多的<span class="number">2</span>个</span><br><span class="line">most_common_time[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"># 绘制聊条时间断的图</span><br><span class="line">active_time_pic_path <span class="operator">=</span> os.path.join(folder_path,&#x27;活跃时间图.png&#x27;)</span><br><span class="line"><span class="type">Draw_Linegraph</span>(dict(sorted(time_counts.items())),&#x27;聊天时段汇总统计&#x27;,active_time_pic_path)</span><br></pre></td></tr></table></figure><h4 id="每周聊天情况分析"><a href="#每周聊天情况分析" class="headerlink" title="每周聊天情况分析"></a>每周聊天情况分析</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 统计每周聊天情况</span><br><span class="line">week_chat_counts <span class="operator">=</span> data.groupby([data[&#x27;<span class="type">StrTime</span>&#x27;].dt.weekday])[&#x27;<span class="type">Sender</span>&#x27;].count()</span><br><span class="line">week_chat_counts <span class="operator">=</span> pd.<span class="type">DataFrame</span>(week_chat_counts).reset_index()</span><br><span class="line"></span><br><span class="line"># 将星期几映射为名称</span><br><span class="line">week_chat_counts[&#x27;<span class="type">StrTime</span>&#x27;] <span class="operator">=</span> week_chat_counts[&#x27;<span class="type">StrTime</span>&#x27;].map(&#123;</span><br><span class="line">    <span class="number">0</span>: &#x27;周一&#x27;,</span><br><span class="line">    <span class="number">1</span>: &#x27;周二&#x27;,</span><br><span class="line">    <span class="number">2</span>: &#x27;周三&#x27;,</span><br><span class="line">    <span class="number">3</span>: &#x27;周四&#x27;,</span><br><span class="line">    <span class="number">4</span>: &#x27;周五&#x27;,</span><br><span class="line">    <span class="number">5</span>: &#x27;周六&#x27;,</span><br><span class="line">    <span class="number">6</span>: &#x27;周日&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">week_chat_counts[&#x27;weight&#x27;] <span class="operator">=</span> week_chat_counts[&#x27;<span class="type">Sender</span>&#x27;] <span class="operator">/</span> week_chat_counts[&#x27;<span class="type">Sender</span>&#x27;].sum()</span><br><span class="line">week_chat_counts</span><br><span class="line"></span><br><span class="line">top_two <span class="operator">=</span> week_chat_counts.nlargest(<span class="number">2</span>, &#x27;weight&#x27;)</span><br><span class="line">top_strtime <span class="operator">=</span> top_two[&#x27;<span class="type">StrTime</span>&#x27;].tolist()</span><br><span class="line"></span><br><span class="line"># 绘制饼图</span><br><span class="line">week_chat_counts_dict <span class="operator">=</span> dict(<span class="built_in">zip</span>(week_chat_counts[&#x27;<span class="type">StrTime</span>&#x27;],week_chat_counts[&#x27;weight&#x27;]))</span><br><span class="line"></span><br><span class="line">week_chat_pic_path <span class="operator">=</span> os.path.join(folder_path,&#x27;聊天星期图.png&#x27;)</span><br><span class="line"><span class="type">Draw_Piechart</span>(week_chat_counts_dict,&#x27;各星期聊天占比&#x27;,week_chat_pic_path)</span><br></pre></td></tr></table></figure><h2 id="自动生成PPT-PDF报告"><a href="#自动生成PPT-PDF报告" class="headerlink" title="自动生成PPT&amp;PDF报告"></a>自动生成PPT&amp;PDF报告</h2><p>可以直接利用数据生成HTML文档,但是因为不太会HTML，遂弃。原本还想着用Python连接H5，自动化生成H5，发现也不太可行。最后选择制作一份相对固定的PPT模板，利用Python对PPT内容进行修改，最后生成PDF文档。</p><h3 id="自动化生成PPT报告"><a href="#自动化生成PPT报告" class="headerlink" title="自动化生成PPT报告"></a>自动化生成PPT报告</h3><ul><li>准备一个可视化PPT模板，对需要更新文字图片的对象类型重新命名，方便后续Python一对一输入修改。【形状格式-选择窗口-修改对应的对象】</li><li>因为菜，所以暂时无法解决微信头像自动下载的问题，需要提前将俩人的微信头像放入“图片信息”文件夹【若不需要微信头像,replace_pic直接删除前2个元素】</li><li>用spire.presentation这个库转换PDF，图片清晰度会损失；但是用Win32一直报错,暂时解决不了。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#  键是文本框名字,值是该文本框输入内容</span><br><span class="line"></span><br><span class="line">replace_content <span class="operator">=</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#x27;自己微信昵称&#x27;: <span class="type">NickName_myself</span>,</span><br><span class="line">    &#x27;对面微信昵称&#x27;: <span class="type">NickName_other</span>,</span><br><span class="line">    &#x27;第一次见面时间&#x27;: the_first_time.date(),</span><br><span class="line">    &#x27;相识天数&#x27;: days_difference,</span><br><span class="line">    &#x27;地球圈数&#x27;: round(days_difference <span class="operator">*</span> <span class="number">5</span> <span class="operator">*</span> <span class="number">24</span> <span class="operator">/</span> <span class="number">40076</span>, <span class="number">1</span>),</span><br><span class="line">    &#x27;发送信息数&#x27;: data_num,</span><br><span class="line">    &#x27;文本总数&#x27;: total_str_count,</span><br><span class="line">    &#x27;最常发送词&#x27;: max_content_word_list_key,</span><br><span class="line">    &#x27;词频数&#x27;: max_content_word_list_value,</span><br><span class="line">    &#x27;聊天最多一天&#x27;: max_day_chat_day,</span><br><span class="line">    &#x27;聊天最多一天信息数&#x27;: max_day_chat_counts_value,</span><br><span class="line">    &#x27;活跃时间段&#x27;: most_common_time[<span class="number">0</span>],</span><br><span class="line">    &#x27;最多星期&#x27;: top_strtime[<span class="number">0</span>],</span><br><span class="line">    &#x27;次多星期&#x27;: top_strtime[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 需要更新图片的位置</span><br><span class="line">replace_pic <span class="operator">=</span> [&#x27;自己头像&#x27;, &#x27;他人头像&#x27;, &#x27;全部聊天词云图&#x27;, &#x27;最多聊天词云图&#x27;, &#x27;活跃时间图&#x27;, &#x27;聊天星期图&#x27;]</span><br><span class="line"></span><br><span class="line">pptfile_name <span class="operator">=</span> &#x27;微信聊天可视化模板.pptx&#x27;</span><br><span class="line">pdffile_name <span class="operator">=</span> &#x27;微信聊天可视化.pdf&#x27;</span><br></pre></td></tr></table></figure></li></ul><h3 id="PPT文档转PDF文档"><a href="#PPT文档转PDF文档" class="headerlink" title="PPT文档转PDF文档"></a>PPT文档转PDF文档</h3><ul><li>若PPT文档中存在特殊字体，PPT文档需将文字嵌入文档，否则转换成PDF文字格式会出错。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def <span class="type">Get_pdf</span>(replace_content, replace_pic, pptfile_name, pdffile_name, folder_path):</span><br><span class="line">    </span><br><span class="line">    # 打开现有的 <span class="type">PPT</span> 文件</span><br><span class="line">    ppt <span class="operator">=</span> pptx.<span class="type">Presentation</span>(pptfile_name)</span><br><span class="line"></span><br><span class="line">    # 遍历所有幻灯片</span><br><span class="line">    <span class="keyword">for</span> slide <span class="keyword">in</span> ppt.slides:</span><br><span class="line">        </span><br><span class="line">        # 记录头像的形状信息</span><br><span class="line">        avatar_shapes <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> shape <span class="keyword">in</span> slide.shapes:</span><br><span class="line">            # 检查形状是否有文本框</span><br><span class="line">            <span class="keyword">if</span> hasattr(shape, <span class="string">&quot;text_frame&quot;</span>) and shape.name <span class="keyword">in</span> replace_content :</span><br><span class="line">                new_value <span class="operator">=</span> str(replace_content[shape.name])</span><br><span class="line">                <span class="keyword">for</span> paragraph <span class="keyword">in</span> shape.text_frame.paragraphs:</span><br><span class="line">                    <span class="keyword">for</span> run <span class="keyword">in</span> paragraph.runs:</span><br><span class="line">                        run.text <span class="operator">=</span> new_value</span><br><span class="line">                        new_value <span class="operator">=</span> <span class="string">&quot;&quot;</span>  # 避免多次重复替换</span><br><span class="line"></span><br><span class="line">            elif shape.shape_type <span class="operator">==</span> <span class="number">13</span> and <span class="built_in">any</span>(pic <span class="keyword">in</span> shape.name <span class="keyword">for</span> pic <span class="keyword">in</span> replace_pic):</span><br><span class="line">                pic_name <span class="operator">=</span> next(pic <span class="keyword">for</span> pic <span class="keyword">in</span> replace_pic <span class="keyword">if</span> pic <span class="keyword">in</span> shape.name)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> pic_name <span class="keyword">in</span> [&#x27;自己头像&#x27;, &#x27;他人头像&#x27;]:</span><br><span class="line">                    avatar_shapes.append((shape.left, shape.top, shape.width, shape.height, pic_name))</span><br><span class="line">                    slide.shapes._spTree.remove(shape._element)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    new_image_path <span class="operator">=</span> os.path.join(folder_path, pic_name <span class="operator">+</span> &#x27;.png&#x27;)</span><br><span class="line">                    slide.shapes.add_picture(new_image_path, shape.left, shape.top, width<span class="operator">=</span>shape.width, height<span class="operator">=</span>shape.height)</span><br><span class="line"></span><br><span class="line">        # 重新插入头像图片并下移一层<span class="operator">【</span>为了微信头像是圆形！<span class="operator">】</span></span><br><span class="line">        <span class="keyword">for</span> left, top, width, height, pic_name <span class="keyword">in</span> avatar_shapes:</span><br><span class="line">            new_image_path <span class="operator">=</span> os.path.join(folder_path, pic_name <span class="operator">+</span> &#x27;.png&#x27;)</span><br><span class="line">            new_shape <span class="operator">=</span> slide.shapes.add_picture(new_image_path, left, top, width<span class="operator">=</span>width, height<span class="operator">=</span>height)</span><br><span class="line">            slide.shapes._spTree.remove(new_shape._element)</span><br><span class="line">            slide.shapes._spTree.insert(<span class="number">0</span>, new_shape._element)</span><br><span class="line"></span><br><span class="line">    new_ppt_name <span class="operator">=</span> os.path.abspath(f&#x27;&#123;pptfile_name.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;生成结果.pptx&#x27;)   # 生成<span class="type">PPT内容</span></span><br><span class="line">    ppt.save(new_ppt_name)</span><br><span class="line"></span><br><span class="line">    # <span class="type">PDF</span> 转换</span><br><span class="line">    presentation <span class="operator">=</span> <span class="type">Presentation</span>()</span><br><span class="line">    presentation.<span class="type">LoadFromFile</span>(new_ppt_name)</span><br><span class="line">    presentation.<span class="type">SaveToFile</span>(pdffile_name, <span class="type">FileFormat</span>.<span class="type">PDF</span>)</span><br><span class="line">    presentation.<span class="type">Dispose</span>()</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="type">Get_pdf</span>(replace_content, replace_pic, pptfile_name, pdffile_name, folder_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/07/hello-world/"/>
      <url>/2024/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
